#include<stdio.h>
int add(int a,int b)
{
        return a+b;
}

int sub(int a,int b)
{
        return a-b;
}

int main()
{
        int a=1,b=2;
        int* ar[3]={&a,&b};//定义出指针数组ar，有3个int*类型的元素，指针数组是存放指针（地址）的数组
        printf("%d\n",*(ar[0]));//ar[0]=&a,所以还要*解引用

        int* (*p_ar)[3]=&ar;//定义出数组指针p_ar，他指向一个3个元素的数组，每个元素的类型是int*
    	printf("%d,%d\n",(*(*p_ar)[0]),(*(*p_ar)[1]));//p_ar=&ar,*p_ar=*&ar,*p_ar=ar，(*p_ar)[0]=ar[0],(*(*p_ar)[0])=a

        int arr[5]={1,2,3,4,5};
        int (*p_arr)[5]=&arr;//定义出一个数组指针p_arr，他指向一个5个元素的数组，每个元素是int类型
        printf("%d\n",(*p_arr)[0]);//p_arr=&arr,*p_arr=*&arr,*p_arr=arr,(*p_arr)[0]=arr[0]
        printf("%d\n",*(*p_arr+1));//这是使用地址方式访问，p_arr=&arr,*p_arr=arr,得到数组arr的首地址，首地址+1就访问到下一个元素，就是*p_arr+1=arr+1,*(*p_arr+1)=*(arr+1)

        char str1[6]="hello";
        printf("%s\n",str1);
        char * str2="world";
        printf("%s\n",str2);

        int (*p_add)(int,int)=add;//定义出一个函数指针p_add，因为定义指针使用*号，所以是*p_add，函数的参数类型（int,int）返回值类型为int，所以合起来就是int (*p_add)(int,int)，函数指针类型int(*)(int,int)
        printf("%d\n",p_add(1,2));//因为p_add=add，所以p_add(1,2)=add(1,2)，add是函数的地址
        int (*p_sub)(int,int)=sub;
        printf("%d\n",p_sub(3,1));

        int (* func_arr[3])(int,int)={0,add,sub};//定义出一个存放函数指针的数组func_arr，他有3个元素，每个元素的类型为int(*)(int,int)
        printf("%d\n",func_arr[1](1,2));//func_arr[1]=add，所以func_arr[1](1,2)=add(1,2)

        int (* (*p_func_arr)[3])(int,int)=&func_arr;//定义出一个存放函数数组指针的指针p_func_arr，因为是指针，所以这样定义需要加*，就是*p_func_arr,因为*p_func_arr要先结合所以加上括号（*p_func_arr）,他指向的是一个3个元素的数组，所以在(*p_func_arr)后面加上[3]，每个元素的类型为int (*)(int,int)，所以最后写成int(*(*p_func_arr)[3])(int,int)
        printf("%d\n",(*p_func_arr)[1](1,2));//*p_func_arr他解引用出就是数组名func_arr，所以(*p_func_arr)[1]=func_arr[1],因为func_arr[1]存放着函数add，所以(*p_func_arr)[1](1,1)等于func_add[1](1,1)

        return 0;
}